#! /usr/bin/env python3

import sys #For argv[0] on usage statement
import os  #For UID
import socket #Most likely for estting up socket.  Not sure
import threading
import signal
import sys
# from http://www.tutorialspoint.com/python3/python_multithreading.htm :
class myThread (threading.Thread):
    def __init__(self, port):
        threading.Thread.__init__(self)
        self.port = port
    def run(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #UDP Socket
        sock.bind(("127.0.0.1", self.port))
        signal.pthread_sigmask(signal.SIG_BLOCK, [signal.SIGINT])
        while True:
            ReadFromPipe(sock)

def ReadFromPipe(sock):
    number, addr = sock.recvfrom(1024) # buffer size is 1024 bytes
    #There's a random b on the front of the string.
    number = number.decode("utf-8")
    print(number)
    try:
        switch = str(number[0]).upper()
        number = number[1:]
        if ( switch == 'F' ):
            x = FibNumber(int(number))
        elif ( switch == 'D' ):
            x = HexNumber(int(number))
        elif ( switch == 'R' ):
            x = RomanNum(str(number))
        else:
            x = "Please precede your number with F for Fibonacci,",\
                    "D for Decimal to Hex, or R for Roman Numerals"
        sock.sendto(bytes(x, 'utf-8'), addr)
    except IndexError:
        pass

def main():
    try:
        UDP_IP = "127.0.0.1"
        UDP_PORT1 = int(os.getuid())
        UDP_PORT2 = int(os.getuid()) + 1000
        UDP_PORT3 = int(os.getuid()) + 2000

        thread1 = myThread(UDP_PORT1)
        thread2 = myThread(UDP_PORT2)
        thread3 = myThread(UDP_PORT3)

        thread1.start()
        thread2.start()
        thread3.start()

        print("Running:  Ctrl + C to quit.")
        while True:
            pass
    except KeyboardInterrupt:
        sys.exit()

def FibNumber(number):
    number = number - 2
    x = 1
    y = 1
    if (number > 0):
        for z in range(0,number):
            if ( x > y ) :
                y = y + x
            else:
                x = x + y
    if ( x > y ):
        return hex(x)
    return hex(y)

def HexNumber(number):
    return hex(number)


def RomanNum(number):
    total = 0;
    for each in number.upper():
        if ( each == 'M' ):
            if( total % 1000 != 0 ):
                total -= ((total % 1000) * 2)
            total += 1000
        elif ( each == 'D' ):
            if ( total % 500 != 0 ):
                total -= ((total % 500) * 2)
            total += 500
        elif ( each == 'C' ):
            if ( total % 100 != 0):
                total -= ((total % 100) * 2)
            total += 100
        elif ( each == 'L' ):
            if ( total % 50 != 0):
                total -= ((total % 50) * 2)
            total += 50
        elif ( each == 'X' ):
            if ( total % 10 != 0):
                total -= ((total % 10) * 2)
            total += 10
        elif ( each == 'V' ):
            if ( total % 5 != 0):
                total -= ((total % 5) * 2)
            total += 5
        elif ( each == 'I' ):
            total += 1
        else:
            return "Not a valid roman numberal."
    if (total < 0):
        return "Please order your roman numerals correctly,\
                with the largest value first."
    return hex(total)

if __name__ == '__main__':
    main()
