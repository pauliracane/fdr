#! /usr/bin/env python3

import os  # For UID
import socket # Most likely for estting up socket.  Not sure
import threading # I wonder why
import signal # Signal Handling
# from http://www.tutorialspoint.com/python3/python_multithreading.htm :
class myThread (threading.Thread):
    def __init__(self, port):   # Decalre init function, takes self and port
        threading.Thread.__init__(self) 
        self.port = port        # Set self.port to be the port passed in
    def run(self):              # Start / Run
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP Socket
        sock.bind(("127.0.0.1", self.port)) # Bind to localhost on self.port
        signal.pthread_sigmask(signal.SIG_BLOCK, [signal.SIGINT]) 
        # Don't block Keyboard Interrupt on threads.  PAss to main
        while True:
            ReadFromPipe(sock)

def ReadFromPipe(sock):
    number, addr = sock.recvfrom(1024) # Read in up to 1024 bytes from packet
    number = number.decode("utf-8") # Convert to string from bytes
    try:
        switch = str(number[0]).upper() # Make switch statement on first value
        number = number[1:] # Cut first value from number
        if ( switch == 'F' ):   # Error checking on the number
            if (number.isdigit()):
                if ( int(number) < 100000 ):
                    x = FibNumber(int(number)) # Run fibonacci on number
                else:
                    x = "Error; Number too large."
            else:
                x = "Error; Not A Number"
        elif ( switch == 'D' ):
            if ( number < (10 ** 1001)): # random arbitrarily large number
                x = HexNumber(int(number)) # Change number to Hex
            else:
                x = "Number too large."
        elif ( switch == 'R' ):
            x = RomanNum(str(number)) # Parse string to get total of MVDCIXLs
        else:
            #Shoddy usage statement
            x = "Please precede your number with F for Fibonacci,",\
                    "D for Decimal to Hex, or R for Roman Numerals"
        # send back value in X (Result of function
        sock.sendto(bytes(x, 'utf-8'), addr)
    except IndexError: # If value out of range, ignore it
        pass

def main():
    try:
        # Get port numbers
        UDP_PORT1 = int(os.getuid())        
        UDP_PORT2 = int(os.getuid()) + 1000 
        UDP_PORT3 = int(os.getuid()) + 2000 

        # Initialize Threads
        thread1 = myThread(UDP_PORT1)       
        thread2 = myThread(UDP_PORT2)
        thread3 = myThread(UDP_PORT3)
        
        # Daemonize threads to make closing easier
        thread1.daemon = True
        thread2.daemon = True
        thread3.daemon = True

        # Run threads
        thread1.start()
        thread2.start()
        thread3.start()

        print("Running:  Ctrl + C to quit.")
        # Run forever (Until keyboard interrupt
        while True:
            pass
    except KeyboardInterrupt:
        return 0

def FibNumber(number): # Return the 'number'th fibonacci number.
    number = number - 2
    x = 1
    y = 1
    if (number > 0):
        for z in range(0,number):
            if ( x > y ) :
                y = y + x
            else:
                x = x + y
    if ( x > y ):
        return hex(x)
    return hex(y)

def HexNumber(number): # return the hex version of the number
    return hex(number)


def RomanNum(number): # Generate a number based off of roman numbes
    total = 0;
    for each in number.upper():         # Walk through string, doing math
        if ( each == 'M' ):             # IF M, as M should be the first value
            if( total % 1000 != 0 ):    # Check if it's divisible by 1k.
                total -= ((total % 1000) * 2) # Subtract the difference
            total += 1000               # Add 1k.
        elif ( each == 'D' ):           #Same as M, with D's value
            if ( total % 500 != 0 ):
                total -= ((total % 500) * 2)
            total += 500
        elif ( each == 'C' ):           #Same as M with C's value
            if ( total % 100 != 0):
                total -= ((total % 100) * 2)
            total += 100
        elif ( each == 'L' ):           #Same as M with Ls value
            if ( total % 50 != 0):
                total -= ((total % 50) * 2)
            total += 50
        elif ( each == 'X' ):           #Same as M with X's value
            if ( total % 10 != 0):
                total -= ((total % 10) * 2)
            total += 10
        elif ( each == 'V' ):           #Same as M with V's value
            if ( total % 5 != 0):
                total -= ((total % 5) * 2)
            total += 5
        elif ( each == 'I' ):           #Same as M with I's value
            total += 1
        else:                           #If not an above value
            return "Not a valid roman numberal."    #Return this string
    if (total < 0): #If order is wrong / backwards, Give htem this string.
        return "Please order your roman numerals correctly,",\
                "with the largest value first."
    return hex(total)

if __name__ == '__main__':
    main()
